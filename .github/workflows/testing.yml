name: packaging_and_testing

on: [push, pull_request]

jobs:
  pack_rpm_deb:

    strategy:
      fail-fast: false
      matrix:
        os: [centos.7, fedora.31, ubuntu.bionic, debian.buster]
        tarantool:
          - release/1.10.10
          # - master

    env:
      # Set as absolute paths to avoid any possible confusion
      # after changing a current directory.
      SMTP_SRCDIR: ${{ format('{0}/smtp', github.workspace) }}
      PACKPACK_SRCDIR: ${{ format('{0}/smtp/packpack', github.workspace) }}
      SRCDIR: ${{ format('{0}/{1}', github.workspace, github.repository) }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
        with:
          path: ${{ env.SMTP_SRCDIR }}

      - name: Checkout to packpack
        uses: actions/checkout@v2
        with:
          repository: packpack/packpack
          path: ${{ env.PACKPACK_SRCDIR }}

      - name: Export T_* environment variables
        run: |
          # Split ${{ matrix.tarantool }}.
          T="${{ matrix.tarantool }}"
          T_KIND="${T%%/*}"
          T_VERSION="${T##*/}"
          if [ "${T_KIND}" = release ]; then
              T_SERIES="${T_VERSION%.*}"
          else
              T_SERIES="${T_VERSION}"
          fi

          # Make the variables available for the next steps.
          printf '%s=%s\n' T_KIND    "${T_KIND}"    >> "${GITHUB_ENV}"
          printf '%s=%s\n' T_VERSION "${T_VERSION}" >> "${GITHUB_ENV}"
          printf '%s=%s\n' T_SERIES  "${T_SERIES}"  >> "${GITHUB_ENV}"

      - name: Setup tarantool ${{ env.T_SERIES }} repository
        run: |
          URL="https://tarantool.io/${T_KIND}/${T_SERIES}/installer.sh"
          curl -fsSL "${URL}" > installer.sh
          chmod a+x installer.sh
          sudo ./installer.sh

      - name: Install tarantool ${{ matrix.tarantool }}
        run: |
          # Install tarantool.
          #
          # We don't use tarantool/setup-tarantool GitHub Action
          # at the moment due to several reasons:
          #
          # 1. No way to install a non-last tarantool version from
          #    a repository:
          #    https://github.com/tarantool/setup-tarantool/issues/15
          # 2. No way to install a live package:
          #    https://github.com/tarantool/setup-tarantool/issues/9
          # 3. We likely will install tarantool in a container
          #    job and it'll require support from the action side:
          #    https://github.com/tarantool/setup-tarantool/issues/11
          sudo apt-get install -y "tarantool=${T_VERSION}*" "tarantool-dev=${T_VERSION}*"

      - name: Verify tarantool version
        run: |
          # Workaround https://github.com/tarantool/tarantool/issues/4983
          # Workaround https://github.com/tarantool/tarantool/issues/5040
          tarantool -e "require('fiber').sleep(0) assert(_TARANTOOL:startswith('${T_VERSION}'), _TARANTOOL) os.exit()"

      - name: Install build dependencies for the module
        run: sudo apt-get install -y libcurl4-openssl-dev

      - name: Pack
        run: |
          cd "${SMTP_SRCDIR}"
          for TYPE in rpm debian
          do
          echo "curl -L https://www.tarantool.io/release/1.10/installer.sh | sudo bash" > $TYPE/prebuild.sh
          chmod 777 $TYPE/prebuild.sh
          done
          OS=$(echo "${{ matrix.os }}"| cut -d '.' -f 1) DIST=$(echo "${{ matrix.os }}"| cut -d '.' -f 2) ./packpack/packpack
          DEB_PATH="${SMTP_SRCDIR}/build/"
          PACK_NAME="$(echo "${{ matrix.os }}" | cut -d '.' -f 1)"
          # Make the variables available for the next steps.
          printf '%s=%s\n' DEB_PATH "${DEB_PATH}" >> "${GITHUB_ENV}"
          printf '%s=%s\n' PACK_NAME "${PACK_NAME}" >> "${GITHUB_ENV}"

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACK_NAME }}
          path: ${{ env.DEB_PATH }}

  test_rpm_deb_linux:
    needs: [pack_rpm_deb]
    strategy:
      fail-fast: false
      matrix:
        os: ["centos:7", "fedora:31", "ubuntu:bionic", "debian:buster"]
        tarantool:
          - release/1.10.10

    container:
      image: ${{ matrix.os }}

    env:
      # Prevent packages like tzdata from asking configuration
      # parameters interactively.
      # See https://github.com/packpack/packpack/issues/7
      DEBIAN_FRONTEND: noninteractive

    runs-on: ubuntu-latest
    steps:
      - name: Export T_* environment variables
        run: |
          # Split ${{ matrix.tarantool }}.
          T="${{ matrix.tarantool }}"
          T_KIND="${T%%/*}"
          T_VERSION="${T##*/}"
          if [ "${T_KIND}" = release ]; then
              T_SERIES="${T_VERSION%.*}"
          else
              T_SERIES="${T_VERSION}"
          fi

          ARTIFACT_NAME="$(echo "${{ matrix.os }}" | cut -d ':' -f 1)"

          # Make the variables available for the next steps.
          printf '%s=%s\n' T_KIND    "${T_KIND}"    >> "${GITHUB_ENV}"
          printf '%s=%s\n' T_VERSION "${T_VERSION}" >> "${GITHUB_ENV}"
          printf '%s=%s\n' T_SERIES  "${T_SERIES}"  >> "${GITHUB_ENV}"
          printf '%s=%s\n' ARTIFACT_NAME  "${ARTIFACT_NAME}"  >> "${GITHUB_ENV}"

      - name: Install curl on Centos, Fedora
        if: ${{ matrix.os == 'centos:7' || matrix.os == 'fedora:31' }}
        run: |
          yum update && yum upgrade -y
          yum install curl -y

      - name: Install curl on Ubuntu, Debian
        if: ${{ matrix.os == 'ubuntu:bionic' || matrix.os == 'debian:buster' }}
        run: |
          apt-get update -y && apt-get upgrade -y
          apt-get install curl -y

      - name: Setup tarantool ${{ env.T_SERIES }} repository
        run: |
          URL="https://tarantool.io/${T_KIND}/${T_SERIES}/installer.sh"
          curl -fsSL "${URL}" > installer.sh
          chmod a+x installer.sh
          ./installer.sh

      - name: Install tarantool ${{ matrix.tarantool }} on Centos, Fedora
        if: ${{ matrix.os == 'centos:7' || matrix.os == 'fedora:31' }}
        run: |
          # Install tarantool.
          #
          # We don't use tarantool/setup-tarantool GitHub Action
          # at the moment due to several reasons:
          #
          # 1. No way to install a non-last tarantool version from
          #    a repository:
          #    https://github.com/tarantool/setup-tarantool/issues/15
          # 2. No way to install a live package:
          #    https://github.com/tarantool/setup-tarantool/issues/9
          # 3. We likely will install tarantool in a container
          #    job and it'll require support from the action side:
          #    https://github.com/tarantool/setup-tarantool/issues/11
          yum install -y tarantool

      - name: Install tarantool ${{ matrix.tarantool }} on Ubuntu, Debian
        if: ${{ matrix.os == 'ubuntu:bionic' || matrix.os == 'debian:buster' }}
        run: |
          # Install tarantool.
          #
          # We don't use tarantool/setup-tarantool GitHub Action
          # at the moment due to several reasons:
          #
          # 1. No way to install a non-last tarantool version from
          #    a repository:
          #    https://github.com/tarantool/setup-tarantool/issues/15
          # 2. No way to install a live package:
          #    https://github.com/tarantool/setup-tarantool/issues/9
          # 3. We likely will install tarantool in a container
          #    job and it'll require support from the action side:
          #    https://github.com/tarantool/setup-tarantool/issues/11
          apt-get install -y "tarantool=${T_VERSION}*" "tarantool-dev=${T_VERSION}*"

      - name: Download package
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Install rpm package
        if: ${{ matrix.os == 'centos:7' || matrix.os == 'fedora:31' }}
        run: |
          NAME=$(ls | grep "\.rpm$")
          dpkg -i $NAME

      - name: Install deb package
        if: ${{ matrix.os == 'ubuntu:bionic' || matrix.os == 'debian:buster' }}
        run: |
          NAME=$(ls | grep "\.deb$")
          dpkg -i $NAME

      - name: Checkout smtp
        uses: actions/checkout@v2

      - name: Run test
        run: |
          tarantool test/smtp.test.lua
